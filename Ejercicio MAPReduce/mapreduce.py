# -*- coding: utf-8 -*-
"""MapReduce.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16PEJbZ_xXsvEKAQVRmyBXZ3iRgwn3cJJ
"""

!pip install mrjob==0.7.4

# Commented out IPython magic to ensure Python compatibility.
# %%file wordcount.py
# from mrjob.job import MRJob
# from mrjob.step import MRStep
# 
# # Personaje con mas dialogos
# class MRReto_1(MRJob):
# 
#     def steps(self):
#         return [
#             MRStep(mapper=self.mapper_get_characters,
#                    reducer=self.reducer_count_characters),
#             MRStep(reducer=self.reducer_find_top_characters)
#         ]
# 
#     def mapper_get_characters(self, _, line):
#         splited_line = line.split(',')
#         yield splited_line[3], 1
# 
#     def reducer_count_characters(self, word, counts):
#         yield None, (sum(counts), word)
# 
#     def reducer_find_top_characters(self, _, char_count_pairs):
#         for i in sorted(char_count_pairs):
#             yield None, i
# 
# # Lugar con mas dialogos
# class MRReto_2(MRJob):
# 
#     def steps(self):
#         return [
#             MRStep(mapper=self.mapper_get_places,
#                    reducer=self.reducer_count_places),
#             MRStep(reducer=self.reducer_find_top_places)
#         ]
# 
#     def mapper_get_places(self, _, line):
#         splited_line = line.split(',')
#         yield splited_line[4], 1
# 
#     def reducer_count_places(self, word, counts):
#         yield None, (sum(counts), word)
# 
#     def reducer_find_top_places(self, _, places_count_pairs):
#         for i in sorted(places_count_pairs):
#             yield None, i
# 
# # Palabra mas repetida en los dialogos (4 letras o mas)
# class MRReto_3(MRJob):
# 
#     def steps(self):
#         return [
#             MRStep(mapper=self.mapper_get_dialog,
#                    reducer=self.reducer_count_dialog),
#             MRStep(reducer=self.reducer_find_top_dialog)
#         ]
# 
#     def mapper_get_dialog(self, _, line):
#         splited_line = line.split(',')
#         for word in splited_line[5].split(' '):
#             if len(word) >= 4:
#                 yield word, 1
# 
#     def reducer_count_dialog(self, word, counts):
#         yield None, (sum(counts), word)
# 
#     def reducer_find_top_dialog(self, _, word_count_pairs):
#         for i in sorted(word_count_pairs):
#             yield None, i
# 
# # Palabra mas repetida por Bart Simpson
# class MRReto_4(MRJob):
# 
#     def steps(self):
#         return [
#             MRStep(mapper=self.mapper_get_bart,
#                    reducer=self.reducer_count_bart),
#             MRStep(reducer=self.reducer_find_top_bart)
#         ]
# 
#     def mapper_get_bart(self, _, line):
#         splited_line = line.split(',')
#         for word in splited_line[5].split(' '):
#             if splited_line[3] == 'Bart Simpson' and len(word) >= 4:
#                 yield word, 1
# 
#     def reducer_count_bart(self, word, counts):
#         yield None, (sum(counts), word)
# 
#     def reducer_find_top_bart(self, _, word_count_pairs):
#         for i in sorted(word_count_pairs):
#             yield None, i
# 
# # Cuantos episodios sale Flanders
# class MRReto_5(MRJob):
# 
#     def steps(self):
#         return [
#             MRStep(mapper=self.mapper_get_flanders,
#                    reducer=self.reducer_count_flanders),
#             MRStep(reducer=self.reducer_find_top_flanders)
#         ]
# 
#     def mapper_get_flanders(self, _, line):
#         splited_line = line.split(',')
#         if splited_line[3] == 'Ned Flanders':
#             yield splited_line[0], 1
# 
#     def reducer_count_flanders(self, word, counts):
#         yield None, word
# 
#     def reducer_find_top_flanders(self, _, word_count_pairs):
#         count = 0
#         for i in word_count_pairs:
#             count = count + 1
#         yield None, count
# 
# if __name__ == '__main__':
#     MRReto_3.run()

from mrjob.job import MRJob
from mrjob.step import MRStep

!python wordcount.py simpsons.csv