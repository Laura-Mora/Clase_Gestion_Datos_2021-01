# -*- coding: utf-8 -*-
"""Taller de introducción a Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hRLb70AUAXlQhoMWoK7M0KQ0fMLpKi-q

# Introducción a herramientas para Machine Learning - Python

Definición de una variable - número
"""

spam = 1

"""Consulta del valor de una variable"""

spam

"""Definición de una variable - texto"""

text = "Esto es un texto."

"""Consulta del valor de la variable"""

text

# Primer comentario

"""### Números"""

2 + 2

50 - 5 * 6

(50 - 5 * 6) / 4

8 / 5

"""<span style="color:blue">Pregunta - ¿En qué se diferencia el resultado de una división al resultado de otras operaciones?</span>"""

# type() indica el tipo de dato de un objeto en Python

type(50 - 5 * 6)

"""<span style="color:red">Hacer - Reto 1</span>"""

type ((50 - 5 * 6) / 4)



17 // 3  # División que descarta la parte decimal del resultado

17 % 3  # El operador % retorna el residuo de una división

# Cálculo de potencias

5 ** 2  # 5 al cuadrado

2 ** 7  # 2 a la 7

# El signo = se emplea para hacer asignaciones

width = 20
height = 5 * 9
width * height

n  # Acceder a una variable no definida

"""### Strings

<span style="color:green">Tip - Python permite emplear comillas simples o dobles para definir strings.</span>
"""

'spam eggs'

"doesn't"

# Prueba print()
s = 'First line.'

print(s)

# Los strings pueden ser concatenados (operador +) y repetidos (operador *)

3 * 'un' + 'ium'

# Un string puede ser indexado

word = 'Python'

word[0]  # caracter en la posición 0

word[5]  # caracter en la posición 5

"""<span style="color:green">Tip - Los índices pueden ser negativos, iniciando la cuenta de derecha a izquierda</span>"""

word[-1] # Último caracter

word[-2] # Penúltimo caracter

word[-6] # Primer caracter

# Python también permite hacer particiones para obtener substrings

word[0:2] # caracteres desde la posición 0 (incluida) a la 2 (excluida)

word[2:5] # caracteres desde la posición 2 (incluida) a la 5 (excluida)

# Al omitir el primer índice, se asume por defecto el 0. Al omitir el segundo, se asume por defecto el tamaño del string

word[:2]

word[4:]

word[-2:]

# len() indica la longitud de un String

len(word)

# replace() reemplaza una subcadena de texto dentro de otra cadena

s = "Machine Learning"

s1 = s.replace("Learning","- Imagine Dragons")
print(s1)

"""### Listas"""

# Uno de los tipos de datos compuestos en Python

squares = [1, 4, 9, 16, 25]
squares

# Añadir un nuevo elemento a una lista

squares.append(36)
squares

# Las listas pueden ser indexadas

squares[0]

squares[-1]

squares[-3:]

# len() también aplica a las listas

len(squares)

"""### Condicionales

<span style="color:green">IMPORTANTE - Las estructuras de Python se definen con tabulaciones</span>
"""

# Sentencias If

x = -45

if x < 0:
    print('Número negativo')
elif x == 0:
    print('Cero')
elif x == 1:
    print('Uno')
else:
    print('Número positivo')

print('Número negativo') if x < 0 else print('Número positivo')

x=7
if x % 2 == 0:
  print('par')
else:
  print ('impar')

"""### Ciclos"""

# Se emplea la instrucción while
a = 0
while a <= 10:
    print(a)
    a = a+1

"""### Retos

<span style="color:red">Hacer - Reto 2</span>
"""

#fibonacci
i=[0,1]

while (len(i)<20):
    i.append(i[-1]+i[-2])
    
print(i)

"""<span style="color:red">Hacer - Reto 3</span>"""

string = "Dato"

"""### Ciclos For"""

words = ['cat', 'window', 'defenestrate']
for w in words:
    print(w, len(w))

"""### Conjuntos

<img src="https://jfmolano.github.io/sabana-ml/conjunto.png" style="width:60%">
"""

conjunto_B = {"Luis","Inés","Ana","Beto"} # Definición alternativa
conjunto_N = {"Ana","Beto","Pedro"} # Definición alternativa

conjunto_B - conjunto_N # Elementos en B pero no en N

conjunto_B | conjunto_N # Elementos en B o en N

conjunto_B & conjunto_N # Elementos en B y en N

conjunto_B ^ conjunto_N # Elementos en B y en N pero no en ambos

'Inés' in conjunto_B

'Inés' in conjunto_N

"""### Definición de funciones"""

def elevar_al_cuadrado(n):
    return n**2

elevar_al_cuadrado(8)

def modulo(n, m):
    return n % m

modulo(5,2)

"""<span style="color:red">Hacer - Reto 4</span>"""



"""<span style="color:red">Hacer - Reto 5</span>"""



"""### Retos de práctica"""



"""#### Referencias
* https://docs.python.org/3/tutorial/introduction.html
* http://files.matematicasquinto3.webnode.com.co/200000016-c030bc129e/5.png
"""